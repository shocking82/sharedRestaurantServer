/*
 * This file is generated by jOOQ.
*/
package com.johnsong.android.spring.jooq.information_schema.tables.pojos;


import java.io.Serializable;

import javax.annotation.Generated;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyCaches implements Serializable {

    private static final long serialVersionUID = 567528897;

    private final String   keyCacheName;
    private final UInteger segments;
    private final UInteger segmentNumber;
    private final ULong    fullSize;
    private final ULong    blockSize;
    private final ULong    usedBlocks;
    private final ULong    unusedBlocks;
    private final ULong    dirtyBlocks;
    private final ULong    readRequests;
    private final ULong    reads;
    private final ULong    writeRequests;
    private final ULong    writes;

    public KeyCaches(KeyCaches value) {
        this.keyCacheName = value.keyCacheName;
        this.segments = value.segments;
        this.segmentNumber = value.segmentNumber;
        this.fullSize = value.fullSize;
        this.blockSize = value.blockSize;
        this.usedBlocks = value.usedBlocks;
        this.unusedBlocks = value.unusedBlocks;
        this.dirtyBlocks = value.dirtyBlocks;
        this.readRequests = value.readRequests;
        this.reads = value.reads;
        this.writeRequests = value.writeRequests;
        this.writes = value.writes;
    }

    public KeyCaches(
        String   keyCacheName,
        UInteger segments,
        UInteger segmentNumber,
        ULong    fullSize,
        ULong    blockSize,
        ULong    usedBlocks,
        ULong    unusedBlocks,
        ULong    dirtyBlocks,
        ULong    readRequests,
        ULong    reads,
        ULong    writeRequests,
        ULong    writes
    ) {
        this.keyCacheName = keyCacheName;
        this.segments = segments;
        this.segmentNumber = segmentNumber;
        this.fullSize = fullSize;
        this.blockSize = blockSize;
        this.usedBlocks = usedBlocks;
        this.unusedBlocks = unusedBlocks;
        this.dirtyBlocks = dirtyBlocks;
        this.readRequests = readRequests;
        this.reads = reads;
        this.writeRequests = writeRequests;
        this.writes = writes;
    }

    public String getKeyCacheName() {
        return this.keyCacheName;
    }

    public UInteger getSegments() {
        return this.segments;
    }

    public UInteger getSegmentNumber() {
        return this.segmentNumber;
    }

    public ULong getFullSize() {
        return this.fullSize;
    }

    public ULong getBlockSize() {
        return this.blockSize;
    }

    public ULong getUsedBlocks() {
        return this.usedBlocks;
    }

    public ULong getUnusedBlocks() {
        return this.unusedBlocks;
    }

    public ULong getDirtyBlocks() {
        return this.dirtyBlocks;
    }

    public ULong getReadRequests() {
        return this.readRequests;
    }

    public ULong getReads() {
        return this.reads;
    }

    public ULong getWriteRequests() {
        return this.writeRequests;
    }

    public ULong getWrites() {
        return this.writes;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("KeyCaches (");

        sb.append(keyCacheName);
        sb.append(", ").append(segments);
        sb.append(", ").append(segmentNumber);
        sb.append(", ").append(fullSize);
        sb.append(", ").append(blockSize);
        sb.append(", ").append(usedBlocks);
        sb.append(", ").append(unusedBlocks);
        sb.append(", ").append(dirtyBlocks);
        sb.append(", ").append(readRequests);
        sb.append(", ").append(reads);
        sb.append(", ").append(writeRequests);
        sb.append(", ").append(writes);

        sb.append(")");
        return sb.toString();
    }
}
