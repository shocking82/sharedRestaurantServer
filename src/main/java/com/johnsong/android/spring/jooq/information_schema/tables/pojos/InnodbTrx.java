/*
 * This file is generated by jOOQ.
*/
package com.johnsong.android.spring.jooq.information_schema.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTrx implements Serializable {

    private static final long serialVersionUID = -469793596;

    private final String    trxId;
    private final String    trxState;
    private final Timestamp trxStarted;
    private final String    trxRequestedLockId;
    private final Timestamp trxWaitStarted;
    private final ULong     trxWeight;
    private final ULong     trxMysqlThreadId;
    private final String    trxQuery;
    private final String    trxOperationState;
    private final ULong     trxTablesInUse;
    private final ULong     trxTablesLocked;
    private final ULong     trxLockStructs;
    private final ULong     trxLockMemoryBytes;
    private final ULong     trxRowsLocked;
    private final ULong     trxRowsModified;
    private final ULong     trxConcurrencyTickets;
    private final String    trxIsolationLevel;
    private final Integer   trxUniqueChecks;
    private final Integer   trxForeignKeyChecks;
    private final String    trxLastForeignKeyError;
    private final Integer   trxAdaptiveHashLatched;
    private final ULong     trxAdaptiveHashTimeout;
    private final Integer   trxIsReadOnly;
    private final Integer   trxAutocommitNonLocking;

    public InnodbTrx(InnodbTrx value) {
        this.trxId = value.trxId;
        this.trxState = value.trxState;
        this.trxStarted = value.trxStarted;
        this.trxRequestedLockId = value.trxRequestedLockId;
        this.trxWaitStarted = value.trxWaitStarted;
        this.trxWeight = value.trxWeight;
        this.trxMysqlThreadId = value.trxMysqlThreadId;
        this.trxQuery = value.trxQuery;
        this.trxOperationState = value.trxOperationState;
        this.trxTablesInUse = value.trxTablesInUse;
        this.trxTablesLocked = value.trxTablesLocked;
        this.trxLockStructs = value.trxLockStructs;
        this.trxLockMemoryBytes = value.trxLockMemoryBytes;
        this.trxRowsLocked = value.trxRowsLocked;
        this.trxRowsModified = value.trxRowsModified;
        this.trxConcurrencyTickets = value.trxConcurrencyTickets;
        this.trxIsolationLevel = value.trxIsolationLevel;
        this.trxUniqueChecks = value.trxUniqueChecks;
        this.trxForeignKeyChecks = value.trxForeignKeyChecks;
        this.trxLastForeignKeyError = value.trxLastForeignKeyError;
        this.trxAdaptiveHashLatched = value.trxAdaptiveHashLatched;
        this.trxAdaptiveHashTimeout = value.trxAdaptiveHashTimeout;
        this.trxIsReadOnly = value.trxIsReadOnly;
        this.trxAutocommitNonLocking = value.trxAutocommitNonLocking;
    }

    public InnodbTrx(
        String    trxId,
        String    trxState,
        Timestamp trxStarted,
        String    trxRequestedLockId,
        Timestamp trxWaitStarted,
        ULong     trxWeight,
        ULong     trxMysqlThreadId,
        String    trxQuery,
        String    trxOperationState,
        ULong     trxTablesInUse,
        ULong     trxTablesLocked,
        ULong     trxLockStructs,
        ULong     trxLockMemoryBytes,
        ULong     trxRowsLocked,
        ULong     trxRowsModified,
        ULong     trxConcurrencyTickets,
        String    trxIsolationLevel,
        Integer   trxUniqueChecks,
        Integer   trxForeignKeyChecks,
        String    trxLastForeignKeyError,
        Integer   trxAdaptiveHashLatched,
        ULong     trxAdaptiveHashTimeout,
        Integer   trxIsReadOnly,
        Integer   trxAutocommitNonLocking
    ) {
        this.trxId = trxId;
        this.trxState = trxState;
        this.trxStarted = trxStarted;
        this.trxRequestedLockId = trxRequestedLockId;
        this.trxWaitStarted = trxWaitStarted;
        this.trxWeight = trxWeight;
        this.trxMysqlThreadId = trxMysqlThreadId;
        this.trxQuery = trxQuery;
        this.trxOperationState = trxOperationState;
        this.trxTablesInUse = trxTablesInUse;
        this.trxTablesLocked = trxTablesLocked;
        this.trxLockStructs = trxLockStructs;
        this.trxLockMemoryBytes = trxLockMemoryBytes;
        this.trxRowsLocked = trxRowsLocked;
        this.trxRowsModified = trxRowsModified;
        this.trxConcurrencyTickets = trxConcurrencyTickets;
        this.trxIsolationLevel = trxIsolationLevel;
        this.trxUniqueChecks = trxUniqueChecks;
        this.trxForeignKeyChecks = trxForeignKeyChecks;
        this.trxLastForeignKeyError = trxLastForeignKeyError;
        this.trxAdaptiveHashLatched = trxAdaptiveHashLatched;
        this.trxAdaptiveHashTimeout = trxAdaptiveHashTimeout;
        this.trxIsReadOnly = trxIsReadOnly;
        this.trxAutocommitNonLocking = trxAutocommitNonLocking;
    }

    public String getTrxId() {
        return this.trxId;
    }

    public String getTrxState() {
        return this.trxState;
    }

    public Timestamp getTrxStarted() {
        return this.trxStarted;
    }

    public String getTrxRequestedLockId() {
        return this.trxRequestedLockId;
    }

    public Timestamp getTrxWaitStarted() {
        return this.trxWaitStarted;
    }

    public ULong getTrxWeight() {
        return this.trxWeight;
    }

    public ULong getTrxMysqlThreadId() {
        return this.trxMysqlThreadId;
    }

    public String getTrxQuery() {
        return this.trxQuery;
    }

    public String getTrxOperationState() {
        return this.trxOperationState;
    }

    public ULong getTrxTablesInUse() {
        return this.trxTablesInUse;
    }

    public ULong getTrxTablesLocked() {
        return this.trxTablesLocked;
    }

    public ULong getTrxLockStructs() {
        return this.trxLockStructs;
    }

    public ULong getTrxLockMemoryBytes() {
        return this.trxLockMemoryBytes;
    }

    public ULong getTrxRowsLocked() {
        return this.trxRowsLocked;
    }

    public ULong getTrxRowsModified() {
        return this.trxRowsModified;
    }

    public ULong getTrxConcurrencyTickets() {
        return this.trxConcurrencyTickets;
    }

    public String getTrxIsolationLevel() {
        return this.trxIsolationLevel;
    }

    public Integer getTrxUniqueChecks() {
        return this.trxUniqueChecks;
    }

    public Integer getTrxForeignKeyChecks() {
        return this.trxForeignKeyChecks;
    }

    public String getTrxLastForeignKeyError() {
        return this.trxLastForeignKeyError;
    }

    public Integer getTrxAdaptiveHashLatched() {
        return this.trxAdaptiveHashLatched;
    }

    public ULong getTrxAdaptiveHashTimeout() {
        return this.trxAdaptiveHashTimeout;
    }

    public Integer getTrxIsReadOnly() {
        return this.trxIsReadOnly;
    }

    public Integer getTrxAutocommitNonLocking() {
        return this.trxAutocommitNonLocking;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbTrx (");

        sb.append(trxId);
        sb.append(", ").append(trxState);
        sb.append(", ").append(trxStarted);
        sb.append(", ").append(trxRequestedLockId);
        sb.append(", ").append(trxWaitStarted);
        sb.append(", ").append(trxWeight);
        sb.append(", ").append(trxMysqlThreadId);
        sb.append(", ").append(trxQuery);
        sb.append(", ").append(trxOperationState);
        sb.append(", ").append(trxTablesInUse);
        sb.append(", ").append(trxTablesLocked);
        sb.append(", ").append(trxLockStructs);
        sb.append(", ").append(trxLockMemoryBytes);
        sb.append(", ").append(trxRowsLocked);
        sb.append(", ").append(trxRowsModified);
        sb.append(", ").append(trxConcurrencyTickets);
        sb.append(", ").append(trxIsolationLevel);
        sb.append(", ").append(trxUniqueChecks);
        sb.append(", ").append(trxForeignKeyChecks);
        sb.append(", ").append(trxLastForeignKeyError);
        sb.append(", ").append(trxAdaptiveHashLatched);
        sb.append(", ").append(trxAdaptiveHashTimeout);
        sb.append(", ").append(trxIsReadOnly);
        sb.append(", ").append(trxAutocommitNonLocking);

        sb.append(")");
        return sb.toString();
    }
}
